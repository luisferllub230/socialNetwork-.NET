// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using socialNetwork.source.Core.Persistence.Context;

#nullable disable

namespace socialNetwork.source.Core.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221031020225_add-isActive")]
    partial class addisActive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("socialNetwork.source.Core.Domain.Entities.Coments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("postComentID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("postComentID");

                    b.HasIndex("userID");

                    b.ToTable("Coments", (string)null);
                });

            modelBuilder.Entity("socialNetwork.source.Core.Domain.Entities.Friend", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<bool>("isFriend")
                        .HasColumnType("bit");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("receiverId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Friend", (string)null);
                });

            modelBuilder.Entity("socialNetwork.source.Core.Domain.Entities.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("PostImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReactionLikes")
                        .HasColumnType("int");

                    b.Property<int>("TotalComents")
                        .HasColumnType("int");

                    b.Property<int>("postUsersId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("postUsersId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("socialNetwork.source.Core.Domain.Entities.Users", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserNickName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("socialNetwork.source.Core.Domain.Entities.Coments", b =>
                {
                    b.HasOne("socialNetwork.source.Core.Domain.Entities.Post", "Post")
                        .WithMany("ComentsPost")
                        .HasForeignKey("postComentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("socialNetwork.source.Core.Domain.Entities.Users", "user")
                        .WithMany("Coments")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("user");
                });

            modelBuilder.Entity("socialNetwork.source.Core.Domain.Entities.Post", b =>
                {
                    b.HasOne("socialNetwork.source.Core.Domain.Entities.Users", "PostUsers")
                        .WithMany("post")
                        .HasForeignKey("postUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostUsers");
                });

            modelBuilder.Entity("socialNetwork.source.Core.Domain.Entities.Post", b =>
                {
                    b.Navigation("ComentsPost");
                });

            modelBuilder.Entity("socialNetwork.source.Core.Domain.Entities.Users", b =>
                {
                    b.Navigation("Coments");

                    b.Navigation("post");
                });
#pragma warning restore 612, 618
        }
    }
}
